-- The equivalents of this file in n64decomp/sm64 are 'src/levels/intro/leveldata.c'
-- The equivalent of this file in sm64js is 'src/levels/intro/leveldata.js'

-- TODO: Replace the current asset handler with one that will scale better and avoids bloating the chip size.
local scripts = getScripts()
local root
for path in pairs(scripts) do
	local i = string.find(path, '/init.lua', nil, true)
	if i then
		root = string.sub(path, 1, i) -- e.g. "sm64sf2/"
		break
	end
end
assert(root, "could not find root")
local function just_figure_it_out_please(path)
	local temppath = 'sm64sf2_'..string.gsub(path, '/', '_')
	temppath = file.existsTemp(temppath) or file.writeTemp(temppath, scripts[root..path])
	printf("[just_figure_it_out_please] temppath: %q\n", temppath)
	return material.createFromImage('../'..temppath, '')
end

local mwp = mesh.writePosition
local v = Vector
local mwuv = mesh.writeUV
local mwc = mesh.writeColor
-- 0x07000000 - 0x07003500
local function intro_seg7_vertex_07000000()
	-- Find and replace '\n    ' with '\n\t'
	-- Find and replace 'static const Vtx intro_seg7_vertex_[0-9A-F]\[] = {\n' with ''
	-- Find and replace '};\n' with ''
	-- Find and replace '// ' with '\t-- '
	-- Find and replace '{{{' with 'mwp(v('
	-- Find and replace '}, 0, {' with ')); mwuv(0, '
	-- Find and replace '}, {0x' with '); mwc(0x'
	-- Find and replace '}}},' with ')'
	-- 0x07000000 - 0x07000100
	mwp(v(   498,    -74,     90)); mwuv(0,    760,    796); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   617,   -184,    153)); mwuv(0,    816,    876); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   660,    -62,     83)); mwuv(0,    830,    778); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   918,   -126,    120)); mwuv(0,    946,    818); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   811,     23,     33)); mwuv(0,    894,    706); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   765,    -44,     73)); mwuv(0,    876,    760); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   969,     83,      0)); mwuv(0,    962,    654); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   790,    200,    -68)); mwuv(0,    878,    570); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   699,    102,    -12)); mwuv(0,    842,    650); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   765,    -44,     73)); mwuv(0,    876,    760); mwc(0x1f, 0xc0, 0x00, 0xff)
	mwp(v(   811,      2,     -1)); mwuv(0,    894,    706); mwc(0x1f, 0xc0, 0x00, 0xff)
	mwp(v(   811,     23,     33)); mwuv(0,    894,    706); mwc(0x1f, 0xc0, 0x00, 0xff)
	mwp(v(   765,    -65,     37)); mwuv(0,    876,    760); mwc(0x1f, 0xc0, 0x00, 0xff)
	mwp(v(   615,    199,    -68)); mwuv(0,    802,    578); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   495,    137,    -32)); mwuv(0,    750,    630); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   611,     31,     29)); mwuv(0,    806,    708); mwc(0x00, 0xf1, 0x00, 0xff)
	-- 0x07000100 - 0x070001F0
	mwp(v(   611,     31,     29)); mwuv(0,    806,    708); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   699,    103,    -12)); mwuv(0,    842,    650); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   790,    200,    -68)); mwuv(0,    878,    570); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(   615,    199,    -68)); mwuv(0,    802,    578); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(  -378,    -82,    144)); mwuv(0,    384,    856); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(  -164,   -154,    185)); mwuv(0,    480,    902); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(  -354,    312,    -83)); mwuv(0,    380,    550); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(  -391,     31,     78)); mwuv(0,    374,    768); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(  -570,     87,     46)); mwuv(0,    292,    734); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(  -579,    -19,    108)); mwuv(0,    292,    816); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(  -370,   -153,    185)); mwuv(0,    390,    912); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(  -828,    -32,    115)); mwuv(0,    184,    836); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(  -527,    344,   -102)); mwuv(0,    304,    532); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(  -656,    -91,    149)); mwuv(0,    262,    876); mwc(0x00, 0xf1, 0x00, 0xff)
	mwp(v(  -448,    249,    -47)); mwuv(0,    342,    602); mwc(0x00, 0xf1, 0x00, 0xff)
	-- 0x070001F0 - 0x070002F0
	mwp(v(  -944,    243,    -14)); mwuv(0,    124,    638); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -992,    378,    -91)); mwuv(0,     98,    536); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v( -1127,    377,    -91)); mwuv(0,     38,    542); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -742,     15,    117)); mwuv(0,    220,    806); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -717,    337,    -68)); mwuv(0,    220,    556); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -877,    378,    -91)); mwuv(0,    148,    530); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -853,    141,     44)); mwuv(0,    166,    714); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -565,    -59,    160)); mwuv(0,    300,    856); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -737,   -126,    199)); mwuv(0,    228,    916); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -939,    -22,    139)); mwuv(0,    134,    844); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v( -1037,   -143,    209)); mwuv(0,     96,    942); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v( -1060,    134,     48)); mwuv(0,     76,    728); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v( -1234,   -144,    209)); mwuv(0,      8,    950); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -633,    570,   -238)); mwuv(0,    248,    360); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -639,    816,   -380)); mwuv(0,    238,    168); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -687,    451,   -169)); mwuv(0,    230,    454); mwc(0x65, 0x7f, 0xff, 0xff)
	-- 0x070002F0 - 0x070003E0
	mwp(v(   -12,    706,   -349)); mwuv(0,    518,    216); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(   108,    783,   -394)); mwuv(0,    568,    152); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -177,    752,   -376)); mwuv(0,    442,    188); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(   -92,    441,   -196)); mwuv(0,    490,    426); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(   -24,    627,   -304)); mwuv(0,    514,    278); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(    82,    705,   -349)); mwuv(0,    560,    212); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(     8,    500,   -230)); mwuv(0,    534,    376); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(   -23,    588,   -282)); mwuv(0,    516,    308); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(   147,    541,   -254)); mwuv(0,    594,    338); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(   183,    482,   -220)); mwuv(0,    612,    382); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(    88,    595,   -285)); mwuv(0,    566,    298); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(    88,    635,   -308)); mwuv(0,    564,    268); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -455,    560,   -232)); mwuv(0,    328,    360); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -568,    747,   -340)); mwuv(0,    272,    220); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -559,    610,   -261)); mwuv(0,    280,    326); mwc(0x65, 0x7f, 0xff, 0xff)
	-- 0x070003E0 - 0x070004E0
	mwp(v(  -639,    816,   -380)); mwuv(0,    238,    168); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -758,    540,   -221)); mwuv(0,    194,    388); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -687,    451,   -169)); mwuv(0,    230,    454); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -763,    816,   -380)); mwuv(0,    184,    174); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -633,    570,   -238)); mwuv(0,    248,    360); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -455,    560,   -232)); mwuv(0,    328,    360); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -510,    485,   -189)); mwuv(0,    306,    420); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -559,    610,   -261)); mwuv(0,    280,    326); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -480,    764,   -350)); mwuv(0,    310,    202); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -568,    747,   -340)); mwuv(0,    272,    220); mwc(0x65, 0x7f, 0xff, 0xff)
	mwp(v(  -717,    337,    -68)); mwuv(0,    220,    556); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -565,    -59,    160)); mwuv(0,    300,    856); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -540,    -80,    149)); mwuv(0,    312,    864); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -701,    343,    -95)); mwuv(0,    226,    542); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -737,   -126,    199)); mwuv(0,    228,    916); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -757,   -165,    198)); mwuv(0,    220,    940); mwc(0x20, 0x39, 0xe5, 0xff)
	-- 0x070004E0 - 0x070005D0
	mwp(v(  -757,   -165,    198)); mwuv(0,    220,    940); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -737,   -126,    199)); mwuv(0,    228,    916); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -762,     -2,    104)); mwuv(0,    212,    812); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -742,     15,    117)); mwuv(0,    220,    806); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -762,     -2,    104)); mwuv(0,    212,    812); mwc(0x18, 0x2b, 0xad, 0xff)
	mwp(v(  -742,     15,    117)); mwuv(0,    220,    806); mwc(0x18, 0x2b, 0xad, 0xff)
	mwp(v(  -853,    141,     44)); mwuv(0,    166,    714); mwc(0x18, 0x2b, 0xad, 0xff)
	mwp(v(  -849,     95,     47)); mwuv(0,    170,    740); mwc(0x18, 0x2b, 0xad, 0xff)
	mwp(v(  -888,    390,   -122)); mwuv(0,    142,    514); mwc(0x1a, 0x2e, 0xbb, 0xff)
	mwp(v(  -717,    337,    -68)); mwuv(0,    220,    556); mwc(0x1a, 0x2e, 0xbb, 0xff)
	mwp(v(  -701,    343,    -95)); mwuv(0,    226,    542); mwc(0x1a, 0x2e, 0xbb, 0xff)
	mwp(v(  -877,    378,    -91)); mwuv(0,    148,    530); mwc(0x1a, 0x2e, 0xbb, 0xff)
	mwp(v( -1033,     57,     69)); mwuv(0,     90,    778); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v( -1060,    134,     48)); mwuv(0,     76,    728); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v( -1037,   -143,    209)); mwuv(0,     96,    942); mwc(0x20, 0x39, 0xe5, 0xff)
	-- 0x070005D0 - 0x070006D0
	mwp(v( -1015,   -173,    202)); mwuv(0,    106,    956); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v( -1037,   -143,    209)); mwuv(0,     96,    942); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v( -1259,   -174,    203)); mwuv(0,     -2,    968); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v( -1234,   -144,    209)); mwuv(0,      8,    950); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v( -1033,     57,     69)); mwuv(0,     90,    778); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v( -1259,   -174,    203)); mwuv(0,     -2,    968); mwc(0x10, 0x1c, 0x73, 0xff)
	mwp(v( -1127,    377,    -91)); mwuv(0,     38,    542); mwc(0x10, 0x1c, 0x73, 0xff)
	mwp(v( -1144,    386,   -120)); mwuv(0,     30,    528); mwc(0x10, 0x1c, 0x73, 0xff)
	mwp(v( -1234,   -144,    209)); mwuv(0,      8,    950); mwc(0x10, 0x1c, 0x73, 0xff)
	mwp(v(  -977,    387,   -120)); mwuv(0,    104,    520); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -992,    378,    -91)); mwuv(0,     98,    536); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -941,    285,    -61)); mwuv(0,    122,    598); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -936,    -69,    142)); mwuv(0,    138,    872); mwc(0x13, 0x50, 0x8c, 0xff)
	mwp(v(  -939,    -22,    139)); mwuv(0,    134,    844); mwc(0x13, 0x50, 0x8c, 0xff)
	mwp(v( -1060,    134,     48)); mwuv(0,     76,    728); mwc(0x13, 0x50, 0x8c, 0xff)
	mwp(v( -1033,     57,     69)); mwuv(0,     90,    778); mwc(0x13, 0x50, 0x8c, 0xff)
	-- 0x070006D0 - 0x070007B0
	mwp(v(  -849,     95,     47)); mwuv(0,    170,    740); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -853,    141,     44)); mwuv(0,    166,    714); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -936,    -69,    142)); mwuv(0,    138,    872); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -939,    -22,    139)); mwuv(0,    134,    844); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v( -1144,    386,   -120)); mwuv(0,     30,    528); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v( -1127,    377,    -91)); mwuv(0,     38,    542); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v(  -992,    378,    -91)); mwuv(0,     98,    536); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v(  -977,    387,   -120)); mwuv(0,    104,    520); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v(  -203,    759,   -404)); mwuv(0,    430,    176); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(  -107,    408,   -201)); mwuv(0,    484,    444); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(   -92,    441,   -196)); mwuv(0,    490,    426); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(  -992,    378,    -91)); mwuv(0,     98,    536); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -944,    243,    -14)); mwuv(0,    124,    638); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -941,    285,    -61)); mwuv(0,    122,    598); mwc(0x20, 0x39, 0xe5, 0xff)
	-- 0x070007B0 - 0x070008A0
	mwp(v(  -941,    285,    -61)); mwuv(0,    122,    598); mwc(0x10, 0x1c, 0x73, 0xff)
	mwp(v(  -944,    243,    -14)); mwuv(0,    124,    638); mwc(0x10, 0x1c, 0x73, 0xff)
	mwp(v(  -877,    378,    -91)); mwuv(0,    148,    530); mwc(0x10, 0x1c, 0x73, 0xff)
	mwp(v(  -888,    390,   -122)); mwuv(0,    142,    514); mwc(0x10, 0x1c, 0x73, 0xff)
	mwp(v(  -177,    752,   -376)); mwuv(0,    442,    188); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(  -203,    759,   -404)); mwuv(0,    430,    176); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(   -92,    441,   -196)); mwuv(0,    490,    426); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(   108,    783,   -394)); mwuv(0,    568,    152); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(   137,    795,   -425)); mwuv(0,    580,    132); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(   109,    566,   -292)); mwuv(0,    576,    312); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   108,    645,   -338)); mwuv(0,    572,    250); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(    88,    635,   -308)); mwuv(0,    564,    268); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   183,    482,   -220)); mwuv(0,    612,    382); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   157,    554,   -285)); mwuv(0,    598,    320); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   147,    541,   -254)); mwuv(0,    594,    338); mwc(0x20, 0x39, 0xe5, 0xff)
	-- 0x070008A0 - 0x07000980
	mwp(v(   -92,    441,   -196)); mwuv(0,    490,    426); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   215,    457,   -229)); mwuv(0,    626,    392); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   183,    482,   -220)); mwuv(0,    612,    382); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   157,    554,   -285)); mwuv(0,    598,    320); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -107,    408,   -201)); mwuv(0,    484,    444); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(    82,    705,   -349)); mwuv(0,    560,    212); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   137,    795,   -425)); mwuv(0,    580,    132); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   108,    783,   -394)); mwuv(0,    568,    152); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(    97,    675,   -355)); mwuv(0,    566,    228); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   -12,    706,   -349)); mwuv(0,    518,    216); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(     5,    676,   -356)); mwuv(0,    526,    232); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(    88,    635,   -308)); mwuv(0,    564,    268); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v(   108,    645,   -338)); mwuv(0,    572,    250); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v(     0,    638,   -334)); mwuv(0,    524,    260); mwc(0x16, 0x27, 0x9e, 0xff)
	-- 0x07000980 - 0x07000A70
	mwp(v(    88,    595,   -285)); mwuv(0,    566,    298); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   109,    566,   -292)); mwuv(0,    576,    312); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(    88,    635,   -308)); mwuv(0,    564,    268); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   -23,    588,   -282)); mwuv(0,    516,    308); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   147,    541,   -254)); mwuv(0,    594,    338); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(   157,    554,   -285)); mwuv(0,    598,    320); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(     8,    500,   -230)); mwuv(0,    534,    376); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(    21,    514,   -262)); mwuv(0,    538,    356); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(   -24,    627,   -304)); mwuv(0,    514,    278); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(     5,    676,   -356)); mwuv(0,    526,    232); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   -12,    706,   -349)); mwuv(0,    518,    216); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(     0,    638,   -334)); mwuv(0,    524,    260); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -763,    816,   -380)); mwuv(0,    184,    174); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -783,    825,   -409)); mwuv(0,    174,    160); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -779,    523,   -234)); mwuv(0,    186,    394); mwc(0x12, 0x20, 0x81, 0xff)
	-- 0x07000A70 - 0x07000B60
	mwp(v(    88,    635,   -308)); mwuv(0,    564,    268); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v(     0,    638,   -334)); mwuv(0,    524,    260); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v(   -24,    627,   -304)); mwuv(0,    514,    278); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v(     8,    500,   -230)); mwuv(0,    534,    376); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(     4,    560,   -289)); mwuv(0,    530,    320); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   -23,    588,   -282)); mwuv(0,    516,    308); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(   109,    566,   -292)); mwuv(0,    576,    312); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(    21,    514,   -262)); mwuv(0,    538,    356); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -619,    825,   -409)); mwuv(0,    246,    152); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v(  -783,    825,   -409)); mwuv(0,    174,    160); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v(  -763,    816,   -380)); mwuv(0,    184,    174); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v(  -639,    816,   -380)); mwuv(0,    238,    168); mwc(0x16, 0x27, 0x9e, 0xff)
	mwp(v(  -633,    570,   -238)); mwuv(0,    248,    360); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -619,    825,   -409)); mwuv(0,    246,    152); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -639,    816,   -380)); mwuv(0,    238,    168); mwc(0x20, 0x39, 0xe5, 0xff)
	-- 0x07000B60 - 0x07000C40
	mwp(v(  -763,    816,   -380)); mwuv(0,    184,    174); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -779,    523,   -234)); mwuv(0,    186,    394); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -758,    540,   -221)); mwuv(0,    194,    388); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -480,    764,   -350)); mwuv(0,    310,    202); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(  -462,    777,   -381)); mwuv(0,    316,    184); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(  -590,    752,   -367)); mwuv(0,    262,    208); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(  -568,    747,   -340)); mwuv(0,    272,    220); mwc(0x14, 0x23, 0x90, 0xff)
	mwp(v(  -758,    540,   -221)); mwuv(0,    194,    388); mwc(0x13, 0x50, 0x8c, 0xff)
	mwp(v(  -779,    523,   -234)); mwuv(0,    186,    394); mwc(0x13, 0x50, 0x8c, 0xff)
	mwp(v(  -695,    420,   -175)); mwuv(0,    226,    470); mwc(0x13, 0x50, 0x8c, 0xff)
	mwp(v(  -687,    451,   -169)); mwuv(0,    230,    454); mwc(0x13, 0x50, 0x8c, 0xff)
	mwp(v(  -633,    570,   -238)); mwuv(0,    248,    360); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -613,    593,   -275)); mwuv(0,    256,    332); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -619,    825,   -409)); mwuv(0,    246,    152); mwc(0x20, 0x39, 0xe5, 0xff)
	-- 0x07000C40 - 0x07000D20
	mwp(v(  -590,    752,   -367)); mwuv(0,    262,    208); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -580,    611,   -285)); mwuv(0,    270,    318); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -559,    610,   -261)); mwuv(0,    280,    326); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -568,    747,   -340)); mwuv(0,    272,    220); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -613,    593,   -275)); mwuv(0,    256,    332); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -633,    570,   -238)); mwuv(0,    248,    360); mwc(0x12, 0x20, 0x81, 0xff)
	mwp(v(  -498,    458,   -197)); mwuv(0,    312,    432); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -433,    545,   -247)); mwuv(0,    338,    362); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -455,    560,   -232)); mwuv(0,    328,    360); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -510,    485,   -189)); mwuv(0,    306,    420); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -462,    777,   -381)); mwuv(0,    316,    184); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -480,    764,   -350)); mwuv(0,    310,    202); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -687,    451,   -169)); mwuv(0,    230,    454); mwc(0x20, 0x39, 0xe5, 0xff)
	mwp(v(  -695,    420,   -175)); mwuv(0,    226,    470); mwc(0x20, 0x39, 0xe5, 0xff)
	-- 0x07000D20 - 0x07000E10
	mwp(v(   969,     83,      0)); mwuv(0,    962,    654); mwc(0x00, 0x8b, 0x00, 0xff)
	mwp(v(   992,     81,    -23)); mwuv(0,    972,    646); mwc(0x00, 0x8b, 0x00, 0xff)
	mwp(v(   796,    209,    -97)); mwuv(0,    880,    554); mwc(0x00, 0x8b, 0x00, 0xff)
	mwp(v(   495,    137,    -32)); mwuv(0,    750,    630); mwc(0x00, 0x52, 0x00, 0xff)
	mwp(v(   474,    139,    -56)); mwuv(0,    740,    622); mwc(0x00, 0x52, 0x00, 0xff)
	mwp(v(   498,    -74,     90)); mwuv(0,    760,    796); mwc(0x00, 0x52, 0x00, 0xff)
	mwp(v(   478,    -93,     77)); mwuv(0,    750,    802); mwc(0x00, 0x52, 0x00, 0xff)
	mwp(v(   935,   -153,    112)); mwuv(0,    954,    830); mwc(0x00, 0xba, 0x00, 0xff)
	mwp(v(   992,     81,    -23)); mwuv(0,    972,    646); mwc(0x00, 0xba, 0x00, 0xff)
	mwp(v(   969,     83,      0)); mwuv(0,    962,    654); mwc(0x00, 0xba, 0x00, 0xff)
	mwp(v(   918,   -126,    120)); mwuv(0,    946,    818); mwc(0x00, 0xba, 0x00, 0xff)
	mwp(v(   617,   -184,    153)); mwuv(0,    816,    876); mwc(0x00, 0xac, 0x00, 0xff)
	mwp(v(   610,   -215,    148)); mwuv(0,    814,    892); mwc(0x00, 0xac, 0x00, 0xff)
	mwp(v(   935,   -153,    112)); mwuv(0,    954,    830); mwc(0x00, 0xac, 0x00, 0xff)
	mwp(v(   918,   -126,    120)); mwuv(0,    946,    818); mwc(0x00, 0xac, 0x00, 0xff)
	-- 0x07000E10 - 0x07000F00
	mwp(v(   699,    103,    -12)); mwuv(0,    842,    650); mwc(0x00, 0x79, 0x00, 0xff)
	mwp(v(   700,     67,    -15)); mwuv(0,    842,    668); mwc(0x00, 0x79, 0x00, 0xff)
	mwp(v(   811,     23,     33)); mwuv(0,    894,    706); mwc(0x00, 0x79, 0x00, 0xff)
	mwp(v(   969,     83,      0)); mwuv(0,    962,    654); mwc(0x00, 0x8b, 0x00, 0xff)
	mwp(v(   796,    209,    -97)); mwuv(0,    880,    554); mwc(0x00, 0x8b, 0x00, 0xff)
	mwp(v(   790,    200,    -68)); mwuv(0,    878,    570); mwc(0x00, 0x8b, 0x00, 0xff)
	mwp(v(   811,     23,     33)); mwuv(0,    894,    706); mwc(0x00, 0x4b, 0x00, 0xff)
	mwp(v(   783,      8,     18)); mwuv(0,    882,    710); mwc(0x00, 0x4b, 0x00, 0xff)
	mwp(v(   752,    -37,     45)); mwuv(0,    870,    748); mwc(0x00, 0x4b, 0x00, 0xff)
	mwp(v(   765,    -44,     73)); mwuv(0,    876,    760); mwc(0x00, 0x4b, 0x00, 0xff)
	mwp(v(   765,    -44,     73)); mwuv(0,    876,    760); mwc(0x00, 0x62, 0x00, 0xff)
	mwp(v(   752,    -37,     45)); mwuv(0,    870,    748); mwc(0x00, 0x62, 0x00, 0xff)
	mwp(v(   671,    -50,     52)); mwuv(0,    834,    762); mwc(0x00, 0x62, 0x00, 0xff)
	mwp(v(   660,    -62,     83)); mwuv(0,    830,    778); mwc(0x00, 0x62, 0x00, 0xff)
	mwp(v(   783,      8,     18)); mwuv(0,    882,    710); mwc(0x00, 0x79, 0x00, 0xff)
	-- 0x07000F00 - 0x07000FF0
	mwp(v(   790,    200,    -68)); mwuv(0,    878,    570); mwc(0x00, 0x6a, 0x00, 0xff)
	mwp(v(   796,    209,    -97)); mwuv(0,    880,    554); mwc(0x00, 0x6a, 0x00, 0xff)
	mwp(v(   610,    209,    -97)); mwuv(0,    798,    562); mwc(0x00, 0x6a, 0x00, 0xff)
	mwp(v(   660,    -62,     83)); mwuv(0,    830,    778); mwc(0x00, 0xa4, 0x00, 0xff)
	mwp(v(   671,    -50,     52)); mwuv(0,    834,    762); mwc(0x00, 0xa4, 0x00, 0xff)
	mwp(v(   611,     31,     29)); mwuv(0,    806,    708); mwc(0x00, 0xa4, 0x00, 0xff)
	mwp(v(   636,     16,     14)); mwuv(0,    816,    712); mwc(0x00, 0xa4, 0x00, 0xff)
	mwp(v(   498,    -74,     90)); mwuv(0,    760,    796); mwc(0x00, 0x75, 0x00, 0xff)
	mwp(v(   478,    -93,     77)); mwuv(0,    750,    802); mwc(0x00, 0x75, 0x00, 0xff)
	mwp(v(   610,   -215,    148)); mwuv(0,    814,    892); mwc(0x00, 0x75, 0x00, 0xff)
	mwp(v(   617,   -184,    153)); mwuv(0,    816,    876); mwc(0x00, 0x75, 0x00, 0xff)
	mwp(v(   611,     31,     29)); mwuv(0,    806,    708); mwc(0x00, 0xbb, 0x00, 0xff)
	mwp(v(   700,     67,    -15)); mwuv(0,    842,    668); mwc(0x00, 0xbb, 0x00, 0xff)
	mwp(v(   699,    103,    -12)); mwuv(0,    842,    650); mwc(0x00, 0xbb, 0x00, 0xff)
	mwp(v(   636,     16,     14)); mwuv(0,    816,    712); mwc(0x00, 0xbb, 0x00, 0xff)
	-- 0x07000FF0 - 0x070010E0
	mwp(v(  -397,   -107,    135)); mwuv(0,    376,    868); mwc(0x00, 0x54, 0x00, 0xff)
	mwp(v(  -388,   -183,    179)); mwuv(0,    382,    928); mwc(0x00, 0x54, 0x00, 0xff)
	mwp(v(  -370,   -153,    185)); mwuv(0,    390,    912); mwc(0x00, 0x54, 0x00, 0xff)
	mwp(v(   790,    200,    -68)); mwuv(0,    878,    570); mwc(0x00, 0x6a, 0x00, 0xff)
	mwp(v(   610,    209,    -97)); mwuv(0,    798,    562); mwc(0x00, 0x6a, 0x00, 0xff)
	mwp(v(   615,    199,    -68)); mwuv(0,    802,    578); mwc(0x00, 0x6a, 0x00, 0xff)
	mwp(v(   615,    199,    -68)); mwuv(0,    802,    578); mwc(0x00, 0x54, 0x00, 0xff)
	mwp(v(   610,    209,    -97)); mwuv(0,    798,    562); mwc(0x00, 0x54, 0x00, 0xff)
	mwp(v(   495,    137,    -32)); mwuv(0,    750,    630); mwc(0x00, 0x54, 0x00, 0xff)
	mwp(v(   474,    139,    -56)); mwuv(0,    740,    622); mwc(0x00, 0x54, 0x00, 0xff)
	mwp(v(  -370,   -153,    185)); mwuv(0,    390,    912); mwc(0x00, 0xa4, 0x00, 0xff)
	mwp(v(  -388,   -183,    179)); mwuv(0,    382,    928); mwc(0x00, 0xa4, 0x00, 0xff)
	mwp(v(  -164,   -154,    185)); mwuv(0,    480,    902); mwc(0x00, 0xa4, 0x00, 0xff)
	mwp(v(  -134,   -183,    179)); mwuv(0,    494,    916); mwc(0x00, 0xa4, 0x00, 0xff)
	mwp(v(  -378,    -82,    144)); mwuv(0,    384,    856); mwc(0x00, 0x54, 0x00, 0xff)
	-- 0x070010E0 - 0x070011D0
	mwp(v(  -164,   -154,    185)); mwuv(0,    480,    902); mwc(0x00, 0xa6, 0x00, 0xff)
	mwp(v(  -134,   -183,    179)); mwuv(0,    494,    916); mwc(0x00, 0xa6, 0x00, 0xff)
	mwp(v(  -354,    312,    -83)); mwuv(0,    380,    550); mwc(0x00, 0xa6, 0x00, 0xff)
	mwp(v(  -828,    -32,    115)); mwuv(0,    184,    836); mwc(0x00, 0x8f, 0x00, 0xff)
	mwp(v(  -861,    -51,    103)); mwuv(0,    170,    846); mwc(0x00, 0x8f, 0x00, 0xff)
	mwp(v(  -651,   -124,    144)); mwuv(0,    264,    892); mwc(0x00, 0x8f, 0x00, 0xff)
	mwp(v(  -656,    -91,    149)); mwuv(0,    262,    876); mwc(0x00, 0x8f, 0x00, 0xff)
	mwp(v(  -656,    -91,    149)); mwuv(0,    262,    876); mwc(0x00, 0xbb, 0x00, 0xff)
	mwp(v(  -573,    -52,    103)); mwuv(0,    296,    834); mwc(0x00, 0xbb, 0x00, 0xff)
	mwp(v(  -579,    -19,    108)); mwuv(0,    292,    816); mwc(0x00, 0xbb, 0x00, 0xff)
	mwp(v(  -651,   -124,    144)); mwuv(0,    264,    892); mwc(0x00, 0xbb, 0x00, 0xff)
	mwp(v(  -579,    -19,    108)); mwuv(0,    292,    816); mwc(0x00, 0x90, 0x00, 0xff)
	mwp(v(  -573,    -52,    103)); mwuv(0,    296,    834); mwc(0x00, 0x90, 0x00, 0xff)
	mwp(v(  -397,   -107,    135)); mwuv(0,    376,    868); mwc(0x00, 0x90, 0x00, 0xff)
	mwp(v(  -378,    -82,    144)); mwuv(0,    384,    856); mwc(0x00, 0x90, 0x00, 0xff)
	-- 0x070011D0 - 0x070012C0
	mwp(v(  -448,    249,    -47)); mwuv(0,    342,    602); mwc(0x00, 0x5a, 0x00, 0xff)
	mwp(v(  -420,     50,     43)); mwuv(0,    360,    748); mwc(0x00, 0x5a, 0x00, 0xff)
	mwp(v(  -391,     31,     78)); mwuv(0,    374,    768); mwc(0x00, 0x5a, 0x00, 0xff)
	mwp(v(  -134,   -183,    179)); mwuv(0,    494,    916); mwc(0x00, 0xa6, 0x00, 0xff)
	mwp(v(  -339,    318,   -110)); mwuv(0,    386,    536); mwc(0x00, 0xa6, 0x00, 0xff)
	mwp(v(  -354,    312,    -83)); mwuv(0,    380,    550); mwc(0x00, 0xa6, 0x00, 0xff)
	mwp(v(  -391,     31,     78)); mwuv(0,    374,    768); mwc(0x00, 0x79, 0x00, 0xff)
	mwp(v(  -537,     87,     22)); mwuv(0,    306,    724); mwc(0x00, 0x79, 0x00, 0xff)
	mwp(v(  -570,     87,     46)); mwuv(0,    292,    734); mwc(0x00, 0x79, 0x00, 0xff)
	mwp(v(  -420,     50,     43)); mwuv(0,    360,    748); mwc(0x00, 0x79, 0x00, 0xff)
	mwp(v(  -527,    344,   -102)); mwuv(0,    304,    532); mwc(0x00, 0x4b, 0x00, 0xff)
	mwp(v(  -536,    356,   -132)); mwuv(0,    298,    516); mwc(0x00, 0x4b, 0x00, 0xff)
	mwp(v(  -861,    -51,    103)); mwuv(0,    170,    846); mwc(0x00, 0x4b, 0x00, 0xff)
	mwp(v(  -828,    -32,    115)); mwuv(0,    184,    836); mwc(0x00, 0x4b, 0x00, 0xff)
	mwp(v(  -457,    194,    -38)); mwuv(0,    338,    638); mwc(0x00, 0x5a, 0x00, 0xff)
	-- 0x070012C0 - 0x070013C0
	mwp(v(   334,    706,   -391)); mwuv(0,    670,    188); mwc(0x00, 0xb1, 0x00, 0xff)
	mwp(v(   310,    758,   -397)); mwuv(0,    658,    156); mwc(0x00, 0xb1, 0x00, 0xff)
	mwp(v(   344,    596,   -327)); mwuv(0,    678,    272); mwc(0x00, 0xb1, 0x00, 0xff)
	mwp(v(  -570,     87,     46)); mwuv(0,    292,    734); mwc(0x00, 0xbc, 0x00, 0xff)
	mwp(v(  -457,    194,    -38)); mwuv(0,    338,    638); mwc(0x00, 0xbc, 0x00, 0xff)
	mwp(v(  -448,    249,    -47)); mwuv(0,    342,    602); mwc(0x00, 0xbc, 0x00, 0xff)
	mwp(v(  -537,     87,     22)); mwuv(0,    306,    724); mwc(0x00, 0xbc, 0x00, 0xff)
	mwp(v(  -354,    312,    -83)); mwuv(0,    380,    550); mwc(0x00, 0x75, 0x00, 0xff)
	mwp(v(  -536,    356,   -132)); mwuv(0,    298,    516); mwc(0x00, 0x75, 0x00, 0xff)
	mwp(v(  -527,    344,   -102)); mwuv(0,    304,    532); mwc(0x00, 0x75, 0x00, 0xff)
	mwp(v(  -339,    318,   -110)); mwuv(0,    386,    536); mwc(0x00, 0x75, 0x00, 0xff)
	mwp(v(   210,    423,   -204)); mwuv(0,    626,    420); mwc(0x00, 0x54, 0x00, 0xff)
	mwp(v(   175,    795,   -419)); mwuv(0,    596,    134); mwc(0x00, 0x54, 0x00, 0xff)
	mwp(v(   152,    804,   -447)); mwuv(0,    586,    120); mwc(0x00, 0x54, 0x00, 0xff)
	mwp(v(   192,    393,   -210)); mwuv(0,    618,    436); mwc(0x00, 0x54, 0x00, 0xff)
	mwp(v(   324,    598,   -305)); mwuv(0,    670,    280); mwc(0x00, 0xb1, 0x00, 0xff)
	-- 0x070013C0 - 0x070014A0
	mwp(v(   344,    596,   -327)); mwuv(0,    678,    272); mwc(0x00, 0x98, 0x00, 0xff)
	mwp(v(   324,    598,   -305)); mwuv(0,    670,    280); mwc(0x00, 0x98, 0x00, 0xff)
	mwp(v(   342,    578,   -294)); mwuv(0,    678,    294); mwc(0x00, 0x98, 0x00, 0xff)
	mwp(v(   497,    547,   -299)); mwuv(0,    746,    304); mwc(0x00, 0x8a, 0x00, 0xff)
	mwp(v(   462,    556,   -281)); mwuv(0,    732,    306); mwc(0x00, 0x8a, 0x00, 0xff)
	mwp(v(   568,    489,   -242)); mwuv(0,    780,    354); mwc(0x00, 0x8a, 0x00, 0xff)
	mwp(v(   604,    480,   -260)); mwuv(0,    796,    352); mwc(0x00, 0x8a, 0x00, 0xff)
	mwp(v(   529,    744,   -413)); mwuv(0,    754,    150); mwc(0x00, 0xb1, 0x00, 0xff)
	mwp(v(   509,    744,   -389)); mwuv(0,    746,    158); mwc(0x00, 0xb1, 0x00, 0xff)
	mwp(v(   519,    600,   -306)); mwuv(0,    756,    270); mwc(0x00, 0xb1, 0x00, 0xff)
	mwp(v(   541,    581,   -318)); mwuv(0,    764,    276); mwc(0x00, 0xb1, 0x00, 0xff)
	mwp(v(   461,    382,   -203)); mwuv(0,    736,    434); mwc(0x00, 0x76, 0x00, 0xff)
	mwp(v(   462,    417,   -200)); mwuv(0,    736,    414); mwc(0x00, 0x76, 0x00, 0xff)
	mwp(v(   336,    532,   -267)); mwuv(0,    676,    330); mwc(0x00, 0x76, 0x00, 0xff)
	-- 0x070014A0 - 0x07001590
	mwp(v(   604,    480,   -260)); mwuv(0,    796,    352); mwc(0x00, 0xba, 0x00, 0xff)
	mwp(v(   462,    417,   -200)); mwuv(0,    736,    414); mwc(0x00, 0xba, 0x00, 0xff)
	mwp(v(   461,    382,   -203)); mwuv(0,    736,    434); mwc(0x00, 0xba, 0x00, 0xff)
	mwp(v(   568,    489,   -242)); mwuv(0,    780,    354); mwc(0x00, 0xba, 0x00, 0xff)
	mwp(v(   541,    581,   -318)); mwuv(0,    764,    276); mwc(0x00, 0xba, 0x00, 0xff)
	mwp(v(   519,    600,   -306)); mwuv(0,    756,    270); mwc(0x00, 0xba, 0x00, 0xff)
	mwp(v(   497,    547,   -299)); mwuv(0,    746,    304); mwc(0x00, 0xba, 0x00, 0xff)
	mwp(v(   462,    556,   -281)); mwuv(0,    732,    306); mwc(0x00, 0xba, 0x00, 0xff)
	mwp(v(   440,    807,   -449)); mwuv(0,    714,    104); mwc(0x00, 0x8d, 0x00, 0xff)
	mwp(v(   509,    744,   -389)); mwuv(0,    746,    158); mwc(0x00, 0x8d, 0x00, 0xff)
	mwp(v(   529,    744,   -413)); mwuv(0,    754,    150); mwc(0x00, 0x8d, 0x00, 0xff)
	mwp(v(   434,    797,   -420)); mwuv(0,    710,    120); mwc(0x00, 0x8d, 0x00, 0xff)
	mwp(v(   336,    532,   -267)); mwuv(0,    676,    330); mwc(0x00, 0xb1, 0x00, 0xff)
	mwp(v(   339,    425,   -205)); mwuv(0,    682,    414); mwc(0x00, 0xb1, 0x00, 0xff)
	mwp(v(   360,    395,   -211)); mwuv(0,    692,    428); mwc(0x00, 0xb1, 0x00, 0xff)
	-- 0x07001590 - 0x07001670
	mwp(v(   461,    382,   -203)); mwuv(0,    736,    434); mwc(0x00, 0x76, 0x00, 0xff)
	mwp(v(   336,    532,   -267)); mwuv(0,    676,    330); mwc(0x00, 0x76, 0x00, 0xff)
	mwp(v(   357,    475,   -258)); mwuv(0,    688,    366); mwc(0x00, 0x76, 0x00, 0xff)
	mwp(v(   344,    596,   -327)); mwuv(0,    678,    272); mwc(0x00, 0x4c, 0x00, 0xff)
	mwp(v(   444,    663,   -343)); mwuv(0,    720,    224); mwc(0x00, 0x4c, 0x00, 0xff)
	mwp(v(   411,    652,   -360)); mwuv(0,    706,    226); mwc(0x00, 0x4c, 0x00, 0xff)
	mwp(v(   342,    578,   -294)); mwuv(0,    678,    294); mwc(0x00, 0x4c, 0x00, 0xff)
	mwp(v(   411,    652,   -360)); mwuv(0,    706,    226); mwc(0x00, 0x79, 0x00, 0xff)
	mwp(v(   310,    758,   -397)); mwuv(0,    658,    156); mwc(0x00, 0x79, 0x00, 0xff)
	mwp(v(   334,    706,   -391)); mwuv(0,    670,    188); mwc(0x00, 0x79, 0x00, 0xff)
	mwp(v(   444,    663,   -343)); mwuv(0,    720,    224); mwc(0x00, 0x79, 0x00, 0xff)
	mwp(v(   357,    475,   -258)); mwuv(0,    688,    366); mwc(0x00, 0xb1, 0x00, 0xff)
	mwp(v(   336,    532,   -267)); mwuv(0,    676,    330); mwc(0x00, 0xb1, 0x00, 0xff)
	mwp(v(   360,    395,   -211)); mwuv(0,    692,    428); mwc(0x00, 0xb1, 0x00, 0xff)
	-- 0x07001670 - 0x07001770
	mwp(v(   152,    804,   -447)); mwuv(0,    586,    120); mwc(0x00, 0x6a, 0x00, 0xff)
	mwp(v(   434,    797,   -420)); mwuv(0,    710,    120); mwc(0x00, 0x6a, 0x00, 0xff)
	mwp(v(   440,    807,   -449)); mwuv(0,    714,    104); mwc(0x00, 0x6a, 0x00, 0xff)
	mwp(v(   175,    795,   -419)); mwuv(0,    596,    134); mwc(0x00, 0x6a, 0x00, 0xff)
	mwp(v(   360,    395,   -211)); mwuv(0,    692,    428); mwc(0x00, 0xa4, 0x00, 0xff)
	mwp(v(   339,    425,   -205)); mwuv(0,    682,    414); mwc(0x00, 0xa4, 0x00, 0xff)
	mwp(v(   210,    423,   -204)); mwuv(0,    626,    420); mwc(0x00, 0xa4, 0x00, 0xff)
	mwp(v(   192,    393,   -210)); mwuv(0,    618,    436); mwc(0x00, 0xa4, 0x00, 0xff)
	mwp(v(   324,    598,   -305)); mwuv(0,    670,    280); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   339,    425,   -205)); mwuv(0,    682,    414); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   336,    532,   -267)); mwuv(0,    676,    330); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   342,    578,   -294)); mwuv(0,    678,    294); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   310,    758,   -397)); mwuv(0,    658,    156); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   210,    423,   -204)); mwuv(0,    626,    420); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   175,    795,   -419)); mwuv(0,    596,    134); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   434,    797,   -420)); mwuv(0,    710,    120); mwc(0x2f, 0xff, 0x2f, 0xff)
	-- 0x07001770 - 0x07001850
	mwp(v(   434,    797,   -420)); mwuv(0,    710,    120); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   444,    663,   -343)); mwuv(0,    720,    224); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   519,    600,   -306)); mwuv(0,    756,    270); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   310,    758,   -397)); mwuv(0,    658,    156); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   509,    744,   -389)); mwuv(0,    746,    158); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   342,    578,   -294)); mwuv(0,    678,    294); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   462,    417,   -200)); mwuv(0,    736,    414); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   568,    489,   -242)); mwuv(0,    780,    354); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   462,    556,   -281)); mwuv(0,    732,    306); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   336,    532,   -267)); mwuv(0,    676,    330); mwc(0x2f, 0xff, 0x2f, 0xff)
	mwp(v(   256,   -197,    150)); mwuv(0,    666,    898); mwc(0x62, 0x00, 0x00, 0xff)
	mwp(v(   277,   -168,    157)); mwuv(0,    674,    882); mwc(0x62, 0x00, 0x00, 0xff)
	mwp(v(   284,    326,   -128)); mwuv(0,    660,    498); mwc(0x62, 0x00, 0x00, 0xff)
	mwp(v(   263,    335,   -157)); mwuv(0,    652,    484); mwc(0x62, 0x00, 0x00, 0xff)
	-- 0x07001850 - 0x07001950
	mwp(v(   496,   -198,    151)); mwuv(0,    772,    888); mwc(0xc5, 0x00, 0x00, 0xff)
	mwp(v(   277,   -168,    157)); mwuv(0,    674,    882); mwc(0xc5, 0x00, 0x00, 0xff)
	mwp(v(   256,   -197,    150)); mwuv(0,    666,    898); mwc(0xc5, 0x00, 0x00, 0xff)
	mwp(v(   476,   -168,    157)); mwuv(0,    762,    874); mwc(0xc5, 0x00, 0x00, 0xff)
	mwp(v(   437,    336,   -157)); mwuv(0,    728,    476); mwc(0xd4, 0x00, 0x00, 0xff)
	mwp(v(   476,   -168,    157)); mwuv(0,    762,    874); mwc(0xd4, 0x00, 0x00, 0xff)
	mwp(v(   496,   -198,    151)); mwuv(0,    772,    888); mwc(0xd4, 0x00, 0x00, 0xff)
	mwp(v(   437,    336,   -157)); mwuv(0,    728,    476); mwc(0xd7, 0x00, 0x00, 0xff)
	mwp(v(   417,    326,   -128)); mwuv(0,    720,    492); mwc(0xd7, 0x00, 0x00, 0xff)
	mwp(v(   476,   -168,    157)); mwuv(0,    762,    874); mwc(0xd7, 0x00, 0x00, 0xff)
	mwp(v( -1043,    585,   -270)); mwuv(0,     68,    358); mwc(0x6b, 0x00, 0x00, 0xff)
	mwp(v( -1182,    531,   -239)); mwuv(0,      8,    406); mwc(0x6b, 0x00, 0x00, 0xff)
	mwp(v( -1140,    536,   -218)); mwuv(0,     26,    408); mwc(0x6b, 0x00, 0x00, 0xff)
	mwp(v(   263,    335,   -157)); mwuv(0,    652,    484); mwc(0x80, 0x00, 0x00, 0xff)
	mwp(v(   284,    326,   -128)); mwuv(0,    660,    498); mwc(0x80, 0x00, 0x00, 0xff)
	mwp(v(   437,    336,   -157)); mwuv(0,    728,    476); mwc(0x80, 0x00, 0x00, 0xff)
	-- 0x07001950 - 0x07001A30
	mwp(v(   284,    326,   -128)); mwuv(0,    660,    498); mwc(0x80, 0x00, 0x00, 0xff)
	mwp(v(   417,    326,   -128)); mwuv(0,    720,    492); mwc(0x80, 0x00, 0x00, 0xff)
	mwp(v(   437,    336,   -157)); mwuv(0,    728,    476); mwc(0x80, 0x00, 0x00, 0xff)
	mwp(v( -1027,    832,   -389)); mwuv(0,     66,    174); mwc(0x5e, 0x00, 0x00, 0xff)
	mwp(v( -1036,    841,   -418)); mwuv(0,     62,    158); mwc(0x5e, 0x00, 0x00, 0xff)
	mwp(v( -1159,    713,   -320)); mwuv(0,     12,    272); mwc(0x5e, 0x00, 0x00, 0xff)
	mwp(v( -1190,    702,   -337)); mwuv(0,     -2,    274); mwc(0x5e, 0x00, 0x00, 0xff)
	mwp(v( -1159,    713,   -320)); mwuv(0,     12,    272); mwc(0x93, 0x00, 0x00, 0xff)
	mwp(v( -1043,    585,   -270)); mwuv(0,     68,    358); mwc(0x93, 0x00, 0x00, 0xff)
	mwp(v( -1004,    589,   -249)); mwuv(0,     84,    360); mwc(0x93, 0x00, 0x00, 0xff)
	mwp(v( -1190,    702,   -337)); mwuv(0,     -2,    274); mwc(0x93, 0x00, 0x00, 0xff)
	mwp(v( -1030,    702,   -314)); mwuv(0,     70,    274); mwc(0xe0, 0x00, 0x00, 0xff)
	mwp(v(  -946,    728,   -353)); mwuv(0,    104,    242); mwc(0xe0, 0x00, 0x00, 0xff)
	mwp(v(  -948,    761,   -348)); mwuv(0,    104,    224); mwc(0xe0, 0x00, 0x00, 0xff)
	-- 0x07001A30 - 0x07001B10
	mwp(v( -1004,    589,   -249)); mwuv(0,     84,    360); mwc(0x6b, 0x00, 0x00, 0xff)
	mwp(v( -1043,    585,   -270)); mwuv(0,     68,    358); mwc(0x6b, 0x00, 0x00, 0xff)
	mwp(v( -1140,    536,   -218)); mwuv(0,     26,    408); mwc(0x6b, 0x00, 0x00, 0xff)
	mwp(v( -1140,    536,   -218)); mwuv(0,     26,    408); mwc(0x99, 0x00, 0x00, 0xff)
	mwp(v( -1182,    531,   -239)); mwuv(0,      8,    406); mwc(0x99, 0x00, 0x00, 0xff)
	mwp(v( -1027,    459,   -173)); mwuv(0,     78,    462); mwc(0x99, 0x00, 0x00, 0xff)
	mwp(v( -1030,    426,   -179)); mwuv(0,     78,    480); mwc(0x99, 0x00, 0x00, 0xff)
	mwp(v(  -868,    831,   -389)); mwuv(0,    136,    166); mwc(0x80, 0x00, 0x00, 0xff)
	mwp(v(  -861,    841,   -418)); mwuv(0,    138,    152); mwc(0x80, 0x00, 0x00, 0xff)
	mwp(v( -1036,    841,   -418)); mwuv(0,     62,    158); mwc(0x80, 0x00, 0x00, 0xff)
	mwp(v( -1027,    832,   -389)); mwuv(0,     66,    174); mwc(0x80, 0x00, 0x00, 0xff)
	mwp(v( -1030,    702,   -314)); mwuv(0,     70,    274); mwc(0xe0, 0x00, 0x00, 0xff)
	mwp(v(  -989,    697,   -335)); mwuv(0,     88,    268); mwc(0xe0, 0x00, 0x00, 0xff)
	mwp(v(  -946,    728,   -353)); mwuv(0,    104,    242); mwc(0xe0, 0x00, 0x00, 0xff)
	-- 0x07001B10 - 0x07001C00
	mwp(v(  -814,    618,   -265)); mwuv(0,    168,    330); mwc(0x99, 0x00, 0x00, 0xff)
	mwp(v(  -786,    618,   -289)); mwuv(0,    180,    322); mwc(0x99, 0x00, 0x00, 0xff)
	mwp(v( -1030,    702,   -314)); mwuv(0,     70,    274); mwc(0x99, 0x00, 0x00, 0xff)
	mwp(v(  -948,    761,   -348)); mwuv(0,    104,    224); mwc(0xa1, 0x00, 0x00, 0xff)
	mwp(v(  -946,    728,   -353)); mwuv(0,    104,    242); mwc(0xa1, 0x00, 0x00, 0xff)
	mwp(v(  -869,    717,   -323)); mwuv(0,    140,    256); mwc(0xa1, 0x00, 0x00, 0xff)
	mwp(v(  -867,    683,   -327)); mwuv(0,    142,    274); mwc(0xa1, 0x00, 0x00, 0xff)
	mwp(v( -1027,    459,   -173)); mwuv(0,     78,    462); mwc(0xd7, 0x00, 0x00, 0xff)
	mwp(v( -1030,    426,   -179)); mwuv(0,     78,    480); mwc(0xd7, 0x00, 0x00, 0xff)
	mwp(v(  -846,    489,   -215)); mwuv(0,    158,    424); mwc(0xd7, 0x00, 0x00, 0xff)
	mwp(v(  -862,    515,   -206)); mwuv(0,    150,    412); mwc(0xd7, 0x00, 0x00, 0xff)
	mwp(v(  -795,    776,   -356)); mwuv(0,    170,    208); mwc(0xac, 0x00, 0x00, 0xff)
	mwp(v(  -762,    766,   -374)); mwuv(0,    184,    206); mwc(0xac, 0x00, 0x00, 0xff)
	mwp(v(  -861,    841,   -418)); mwuv(0,    138,    152); mwc(0xac, 0x00, 0x00, 0xff)
	mwp(v(  -868,    831,   -389)); mwuv(0,    136,    166); mwc(0xac, 0x00, 0x00, 0xff)
	-- 0x07001C00 - 0x07001CE0
	mwp(v(  -862,    515,   -206)); mwuv(0,    150,    412); mwc(0xe3, 0x00, 0x00, 0xff)
	mwp(v(  -786,    618,   -289)); mwuv(0,    180,    322); mwc(0xe3, 0x00, 0x00, 0xff)
	mwp(v(  -814,    618,   -265)); mwuv(0,    168,    330); mwc(0xe3, 0x00, 0x00, 0xff)
	mwp(v(  -786,    618,   -289)); mwuv(0,    180,    322); mwc(0x99, 0x00, 0x00, 0xff)
	mwp(v(  -989,    697,   -335)); mwuv(0,     88,    268); mwc(0x99, 0x00, 0x00, 0xff)
	mwp(v( -1030,    702,   -314)); mwuv(0,     70,    274); mwc(0x99, 0x00, 0x00, 0xff)
	mwp(v(  -869,    717,   -323)); mwuv(0,    140,    256); mwc(0xe3, 0x00, 0x00, 0xff)
	mwp(v(  -762,    766,   -374)); mwuv(0,    184,    206); mwc(0xe3, 0x00, 0x00, 0xff)
	mwp(v(  -795,    776,   -356)); mwuv(0,    170,    208); mwc(0xe3, 0x00, 0x00, 0xff)
	mwp(v(  -867,    683,   -327)); mwuv(0,    142,    274); mwc(0xe3, 0x00, 0x00, 0xff)
	mwp(v(  -846,    489,   -215)); mwuv(0,    158,    424); mwc(0xe3, 0x00, 0x00, 0xff)
	mwp(v( -1004,    589,   -249)); mwuv(0,     84,    360); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v( -1027,    459,   -173)); mwuv(0,     78,    462); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v(  -862,    515,   -206)); mwuv(0,    150,    412); mwc(0xff, 0x2f, 0x2f, 0xff)
	-- 0x07001CE0 - 0x07001DE0
	mwp(v(   476,   -168,    157)); mwuv(0,    762,    874); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v(   417,    326,   -128)); mwuv(0,    720,    492); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v(   284,    326,   -128)); mwuv(0,    660,    498); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v(   277,   -168,    157)); mwuv(0,    674,    882); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v(  -948,    761,   -348)); mwuv(0,    104,    224); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v(  -869,    717,   -323)); mwuv(0,    140,    256); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v(  -795,    776,   -356)); mwuv(0,    170,    208); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v( -1027,    832,   -389)); mwuv(0,     66,    174); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v( -1159,    713,   -320)); mwuv(0,     12,    272); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v( -1030,    702,   -314)); mwuv(0,     70,    274); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v(  -868,    831,   -389)); mwuv(0,    136,    166); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v( -1004,    589,   -249)); mwuv(0,     84,    360); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v(  -814,    618,   -265)); mwuv(0,    168,    330); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v(  -862,    515,   -206)); mwuv(0,    150,    412); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v( -1140,    536,   -218)); mwuv(0,     26,    408); mwc(0xff, 0x2f, 0x2f, 0xff)
	mwp(v( -1027,    459,   -173)); mwuv(0,     78,    462); mwc(0xff, 0x2f, 0x2f, 0xff)
	-- 0x07001DE0 - 0x07001ED0
	mwp(v(   105,     33,     48)); mwuv(0,    592,    736); mwc(0xba, 0xba, 0x00, 0xff)
	mwp(v(   142,     22,     30)); mwuv(0,    608,    736); mwc(0xba, 0xba, 0x00, 0xff)
	mwp(v(   230,     73,      1)); mwuv(0,    646,    692); mwc(0xba, 0xba, 0x00, 0xff)
	mwp(v(   122,   -166,    163)); mwuv(0,    606,    890); mwc(0xba, 0xba, 0x00, 0xff)
	mwp(v(   120,   -201,    160)); mwuv(0,    606,    910); mwc(0xba, 0xba, 0x00, 0xff)
	mwp(v(   260,    -69,    107)); mwuv(0,    664,    808); mwc(0xba, 0xba, 0x00, 0xff)
	mwp(v(   295,    -78,     89)); mwuv(0,    680,    806); mwc(0xba, 0xba, 0x00, 0xff)
	mwp(v(   260,    -69,    107)); mwuv(0,    664,    808); mwc(0x8b, 0x8b, 0x00, 0xff)
	mwp(v(   295,    -78,     89)); mwuv(0,    680,    806); mwc(0x8b, 0x8b, 0x00, 0xff)
	mwp(v(   142,     22,     30)); mwuv(0,    608,    736); mwc(0x8b, 0x8b, 0x00, 0xff)
	mwp(v(   105,     33,     48)); mwuv(0,    592,    736); mwc(0x8b, 0x8b, 0x00, 0xff)
	mwp(v(   -38,    -26,     82)); mwuv(0,    532,    788); mwc(0x6b, 0x6b, 0x00, 0xff)
	mwp(v(   -19,    -79,     89)); mwuv(0,    540,    822); mwc(0x6b, 0x6b, 0x00, 0xff)
	mwp(v(   120,   -201,    160)); mwuv(0,    606,    910); mwc(0x6b, 0x6b, 0x00, 0xff)
	mwp(v(   122,   -166,    163)); mwuv(0,    606,    890); mwc(0x6b, 0x6b, 0x00, 0xff)
	-- 0x07001ED0 - 0x07001FD0
	mwp(v(   101,    165,    -28)); mwuv(0,    586,    634); mwc(0x43, 0x43, 0x00, 0xff)
	mwp(v(   -24,     75,      0)); mwuv(0,    534,    700); mwc(0x43, 0x43, 0x00, 0xff)
	mwp(v(   -22,     62,     31)); mwuv(0,    534,    720); mwc(0x43, 0x43, 0x00, 0xff)
	mwp(v(   -42,   -140,    148)); mwuv(0,    534,    878); mwc(0xb6, 0xb6, 0x00, 0xff)
	mwp(v(   -22,   -169,    141)); mwuv(0,    542,    890); mwc(0xb6, 0xb6, 0x00, 0xff)
	mwp(v(   -19,    -79,     89)); mwuv(0,    540,    822); mwc(0xb6, 0xb6, 0x00, 0xff)
	mwp(v(   -38,    -26,     82)); mwuv(0,    532,    788); mwc(0xb6, 0xb6, 0x00, 0xff)
	mwp(v(  -199,   -145,    151)); mwuv(0,    464,    888); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(  -220,   -176,    145)); mwuv(0,    456,    904); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(   -22,   -169,    141)); mwuv(0,    542,    890); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(   -42,   -140,    148)); mwuv(0,    534,    878); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(   209,     94,     12)); mwuv(0,    636,    684); mwc(0xb1, 0xb1, 0x00, 0xff)
	mwp(v(   230,     73,      1)); mwuv(0,    646,    692); mwc(0xb1, 0xb1, 0x00, 0xff)
	mwp(v(   206,    268,    -87)); mwuv(0,    628,    550); mwc(0xb1, 0xb1, 0x00, 0xff)
	mwp(v(   226,    271,   -113)); mwuv(0,    638,    538); mwc(0xb1, 0xb1, 0x00, 0xff)
	mwp(v(    68,    154,    -45)); mwuv(0,    572,    636); mwc(0x43, 0x43, 0x00, 0xff)
	-- 0x07001FD0 - 0x070020B0
	mwp(v(   -22,     62,     31)); mwuv(0,    534,    720); mwc(0x8b, 0x8b, 0x00, 0xff)
	mwp(v(   -24,     75,      0)); mwuv(0,    534,    700); mwc(0x8b, 0x8b, 0x00, 0xff)
	mwp(v(   -45,     80,     20)); mwuv(0,    524,    706); mwc(0x8b, 0x8b, 0x00, 0xff)
	mwp(v(   206,    268,    -87)); mwuv(0,    628,    550); mwc(0x81, 0x81, 0x00, 0xff)
	mwp(v(   226,    271,   -113)); mwuv(0,    638,    538); mwc(0x81, 0x81, 0x00, 0xff)
	mwp(v(    12,    362,   -165)); mwuv(0,    540,    476); mwc(0x81, 0x81, 0x00, 0xff)
	mwp(v(     8,    353,   -136)); mwuv(0,    538,    492); mwc(0x81, 0x81, 0x00, 0xff)
	mwp(v(   -43,    272,    -89)); mwuv(0,    518,    558); mwc(0x78, 0x78, 0x00, 0xff)
	mwp(v(   -23,    222,    -84)); mwuv(0,    528,    588); mwc(0x78, 0x78, 0x00, 0xff)
	mwp(v(    68,    154,    -45)); mwuv(0,    572,    636); mwc(0x78, 0x78, 0x00, 0xff)
	mwp(v(   101,    165,    -28)); mwuv(0,    586,    634); mwc(0x78, 0x78, 0x00, 0xff)
	mwp(v(  -399,    424,   -165)); mwuv(0,    356,    458); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(  -419,    394,   -172)); mwuv(0,    348,    474); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(  -283,    394,   -171)); mwuv(0,    408,    470); mwc(0xa4, 0xa4, 0x00, 0xff)
	-- 0x070020B0 - 0x070021A0
	mwp(v(   -24,     75,      0)); mwuv(0,    534,    700); mwc(0xb6, 0xb6, 0x00, 0xff)
	mwp(v(   -23,    222,    -84)); mwuv(0,    528,    588); mwc(0xb6, 0xb6, 0x00, 0xff)
	mwp(v(   -43,    272,    -89)); mwuv(0,    518,    558); mwc(0xb6, 0xb6, 0x00, 0xff)
	mwp(v(   -45,     80,     20)); mwuv(0,    524,    706); mwc(0xb6, 0xb6, 0x00, 0xff)
	mwp(v(  -198,    352,   -136)); mwuv(0,    448,    502); mwc(0x51, 0x51, 0x00, 0xff)
	mwp(v(  -218,    362,   -165)); mwuv(0,    438,    488); mwc(0x51, 0x51, 0x00, 0xff)
	mwp(v(  -220,   -176,    145)); mwuv(0,    456,    904); mwc(0x51, 0x51, 0x00, 0xff)
	mwp(v(  -199,   -145,    151)); mwuv(0,    464,    888); mwc(0x51, 0x51, 0x00, 0xff)
	mwp(v(     8,    353,   -136)); mwuv(0,    538,    492); mwc(0x6a, 0x6a, 0x00, 0xff)
	mwp(v(    12,    362,   -165)); mwuv(0,    540,    476); mwc(0x6a, 0x6a, 0x00, 0xff)
	mwp(v(  -218,    362,   -165)); mwuv(0,    438,    488); mwc(0x6a, 0x6a, 0x00, 0xff)
	mwp(v(  -198,    352,   -136)); mwuv(0,    448,    502); mwc(0x6a, 0x6a, 0x00, 0xff)
	mwp(v(  -132,    599,   -266)); mwuv(0,    468,    312); mwc(0xb1, 0xb1, 0x00, 0xff)
	mwp(v(  -111,    583,   -281)); mwuv(0,    478,    316); mwc(0xb1, 0xb1, 0x00, 0xff)
	mwp(v(  -126,    768,   -388)); mwuv(0,    466,    172); mwc(0xb1, 0xb1, 0x00, 0xff)
	-- 0x070021A0 - 0x07002280
	mwp(v(  -399,    424,   -165)); mwuv(0,    356,    458); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(  -283,    394,   -171)); mwuv(0,    408,    470); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(  -303,    423,   -165)); mwuv(0,    398,    454); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(  -400,    811,   -389)); mwuv(0,    342,    158); mwc(0x51, 0x51, 0x00, 0xff)
	mwp(v(  -419,    394,   -172)); mwuv(0,    348,    474); mwc(0x51, 0x51, 0x00, 0xff)
	mwp(v(  -399,    424,   -165)); mwuv(0,    356,    458); mwc(0x51, 0x51, 0x00, 0xff)
	mwp(v(  -421,    820,   -418)); mwuv(0,    334,    144); mwc(0x51, 0x51, 0x00, 0xff)
	mwp(v(  -145,    766,   -363)); mwuv(0,    456,    182); mwc(0x83, 0x83, 0x00, 0xff)
	mwp(v(  -126,    768,   -388)); mwuv(0,    466,    172); mwc(0x83, 0x83, 0x00, 0xff)
	mwp(v(  -238,    810,   -388)); mwuv(0,    414,    152); mwc(0x83, 0x83, 0x00, 0xff)
	mwp(v(  -233,    819,   -417)); mwuv(0,    416,    138); mwc(0x83, 0x83, 0x00, 0xff)
	mwp(v(  -132,    599,   -266)); mwuv(0,    468,    312); mwc(0xb1, 0xb1, 0x00, 0xff)
	mwp(v(  -126,    768,   -388)); mwuv(0,    466,    172); mwc(0xb1, 0xb1, 0x00, 0xff)
	mwp(v(  -145,    766,   -363)); mwuv(0,    456,    182); mwc(0xb1, 0xb1, 0x00, 0xff)
	-- 0x07002280 - 0x07002370
	mwp(v(  -310,    724,   -338)); mwuv(0,    386,    222); mwc(0xa1, 0xa1, 0x00, 0xff)
	mwp(v(  -289,    690,   -343)); mwuv(0,    396,    240); mwc(0xa1, 0xa1, 0x00, 0xff)
	mwp(v(  -215,    678,   -336)); mwuv(0,    428,    246); mwc(0xa1, 0xa1, 0x00, 0xff)
	mwp(v(  -206,    503,   -211)); mwuv(0,    438,    388); mwc(0xbc, 0xbc, 0x00, 0xff)
	mwp(v(  -196,    474,   -218)); mwuv(0,    444,    404); mwc(0xbc, 0xbc, 0x00, 0xff)
	mwp(v(  -132,    599,   -266)); mwuv(0,    468,    312); mwc(0xbc, 0xbc, 0x00, 0xff)
	mwp(v(  -111,    583,   -281)); mwuv(0,    478,    316); mwc(0xbc, 0xbc, 0x00, 0xff)
	mwp(v(  -238,    810,   -388)); mwuv(0,    414,    152); mwc(0x6a, 0x6a, 0x00, 0xff)
	mwp(v(  -233,    819,   -417)); mwuv(0,    416,    138); mwc(0x6a, 0x6a, 0x00, 0xff)
	mwp(v(  -400,    811,   -389)); mwuv(0,    342,    158); mwc(0x6a, 0x6a, 0x00, 0xff)
	mwp(v(  -421,    820,   -418)); mwuv(0,    334,    144); mwc(0x6a, 0x6a, 0x00, 0xff)
	mwp(v(  -189,    704,   -327)); mwuv(0,    440,    232); mwc(0x4c, 0x4c, 0x00, 0xff)
	mwp(v(  -215,    678,   -336)); mwuv(0,    428,    246); mwc(0x4c, 0x4c, 0x00, 0xff)
	mwp(v(  -235,    614,   -299)); mwuv(0,    422,    296); mwc(0x4c, 0x4c, 0x00, 0xff)
	mwp(v(  -219,    607,   -271)); mwuv(0,    430,    310); mwc(0x4c, 0x4c, 0x00, 0xff)
	-- 0x07002370 - 0x07002460
	mwp(v(  -304,    593,   -263)); mwuv(0,    392,    324); mwc(0xb1, 0xb1, 0x00, 0xff)
	mwp(v(  -284,    606,   -294)); mwuv(0,    400,    304); mwc(0xb1, 0xb1, 0x00, 0xff)
	mwp(v(  -289,    690,   -343)); mwuv(0,    396,    240); mwc(0xb1, 0xb1, 0x00, 0xff)
	mwp(v(  -310,    724,   -338)); mwuv(0,    386,    222); mwc(0xa1, 0xa1, 0x00, 0xff)
	mwp(v(  -215,    678,   -336)); mwuv(0,    428,    246); mwc(0xa1, 0xa1, 0x00, 0xff)
	mwp(v(  -189,    704,   -327)); mwuv(0,    440,    232); mwc(0xa1, 0xa1, 0x00, 0xff)
	mwp(v(  -283,    473,   -218)); mwuv(0,    406,    408); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(  -196,    474,   -218)); mwuv(0,    444,    404); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(  -206,    503,   -211)); mwuv(0,    438,    388); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(  -303,    503,   -211)); mwuv(0,    396,    394); mwc(0xa4, 0xa4, 0x00, 0xff)
	mwp(v(  -219,    607,   -271)); mwuv(0,    430,    310); mwc(0x62, 0x62, 0x00, 0xff)
	mwp(v(  -235,    614,   -299)); mwuv(0,    422,    296); mwc(0x62, 0x62, 0x00, 0xff)
	mwp(v(  -304,    593,   -263)); mwuv(0,    392,    324); mwc(0x62, 0x62, 0x00, 0xff)
	mwp(v(  -284,    606,   -294)); mwuv(0,    400,    304); mwc(0x62, 0x62, 0x00, 0xff)
	mwp(v(  -310,    724,   -338)); mwuv(0,    386,    222); mwc(0xb1, 0xb1, 0x00, 0xff)
	-- 0x07002460 - 0x07002560
	mwp(v(  -303,    423,   -165)); mwuv(0,    398,    454); mwc(0xb6, 0xb6, 0x00, 0xff)
	mwp(v(  -283,    394,   -171)); mwuv(0,    408,    470); mwc(0xb6, 0xb6, 0x00, 0xff)
	mwp(v(  -283,    473,   -218)); mwuv(0,    406,    408); mwc(0xb6, 0xb6, 0x00, 0xff)
	mwp(v(  -303,    503,   -211)); mwuv(0,    396,    394); mwc(0xb1, 0xb1, 0x00, 0xff)
	mwp(v(  -198,    352,   -136)); mwuv(0,    448,    502); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   -43,    272,    -89)); mwuv(0,    518,    558); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(     8,    353,   -136)); mwuv(0,    538,    492); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   122,   -166,    163)); mwuv(0,    606,    890); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   105,     33,     48)); mwuv(0,    592,    736); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   -38,    -26,     82)); mwuv(0,    532,    788); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   260,    -69,    107)); mwuv(0,    664,    808); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   101,    165,    -28)); mwuv(0,    586,    634); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   209,     94,     12)); mwuv(0,    636,    684); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   -22,     62,     31)); mwuv(0,    534,    720); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   -45,     80,     20)); mwuv(0,    524,    706); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   -42,   -140,    148)); mwuv(0,    534,    878); mwc(0xff, 0xff, 0x39, 0xff)
	-- 0x07002560 - 0x07002660
	mwp(v(   101,    165,    -28)); mwuv(0,    586,    634); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   206,    268,    -87)); mwuv(0,    628,    550); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(     8,    353,   -136)); mwuv(0,    538,    492); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   -43,    272,    -89)); mwuv(0,    518,    558); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   209,     94,     12)); mwuv(0,    636,    684); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -198,    352,   -136)); mwuv(0,    448,    502); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   -45,     80,     20)); mwuv(0,    524,    706); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -199,   -145,    151)); mwuv(0,    464,    888); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(   -42,   -140,    148)); mwuv(0,    534,    878); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -219,    607,   -271)); mwuv(0,    430,    310); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -145,    766,   -363)); mwuv(0,    456,    182); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -189,    704,   -327)); mwuv(0,    440,    232); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -132,    599,   -266)); mwuv(0,    468,    312); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -206,    503,   -211)); mwuv(0,    438,    388); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -304,    593,   -263)); mwuv(0,    392,    324); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -303,    503,   -211)); mwuv(0,    396,    394); mwc(0xff, 0xff, 0x39, 0xff)
	-- 0x07002660 - 0x07002760
	mwp(v(  -400,    811,   -389)); mwuv(0,    342,    158); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -189,    704,   -327)); mwuv(0,    440,    232); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -145,    766,   -363)); mwuv(0,    456,    182); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -310,    724,   -338)); mwuv(0,    386,    222); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -238,    810,   -388)); mwuv(0,    414,    152); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -304,    593,   -263)); mwuv(0,    392,    324); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -399,    424,   -165)); mwuv(0,    356,    458); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -303,    423,   -165)); mwuv(0,    398,    454); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  -303,    503,   -211)); mwuv(0,    396,    394); mwc(0xff, 0xff, 0x39, 0xff)
	mwp(v(  1414,    378,   -183)); mwuv(0,   5366,     42); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1414,    176,   -350)); mwuv(0,   6200,    858); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1414,    255,   -396)); mwuv(0,   5366,     42); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1462,    447,   -223)); mwuv(0,   5238,   -508); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1462,    378,   -183)); mwuv(0,   5806,     34); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1462,    255,   -396)); mwuv(0,   5806,     34); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1462,    325,   -436)); mwuv(0,   5238,   -508); mwc(0x95, 0x95, 0x61, 0xff)
	-- 0x07002760 - 0x07002840
	mwp(v(  1462,    378,   -183)); mwuv(0,   5806,     34); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1414,    255,   -396)); mwuv(0,   5366,     42); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1462,    255,   -396)); mwuv(0,   5806,     34); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1414,    378,   -183)); mwuv(0,   5366,     42); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1414,    447,   -223)); mwuv(0,   4812,   -502); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1462,    325,   -436)); mwuv(0,   5238,   -508); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1414,    325,   -436)); mwuv(0,   4812,   -502); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1462,    447,   -223)); mwuv(0,   5238,   -508); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1120,    451,   -225)); mwuv(0,   2146,   -484); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1333,    563,   -573)); mwuv(0,   1952,  -2664); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1120,    328,   -438)); mwuv(0,   2146,   -484); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1414,    378,   -183)); mwuv(0,   5366,     42); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1414,    299,   -137)); mwuv(0,   6200,    858); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1414,    176,   -350)); mwuv(0,   6200,    858); mwc(0x95, 0x95, 0x61, 0xff)
	-- 0x07002840 - 0x07002940
	mwp(v(  1414,    685,   -360)); mwuv(0,   2590,  -2676); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1414,    325,   -436)); mwuv(0,   4812,   -502); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1414,    563,   -573)); mwuv(0,   2590,  -2676); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1414,    447,   -223)); mwuv(0,   4812,   -502); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1333,    685,   -360)); mwuv(0,   1952,  -2664); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1414,    685,   -360)); mwuv(0,   2590,  -2676); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1414,    563,   -573)); mwuv(0,   2590,  -2676); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1333,    563,   -573)); mwuv(0,   1952,  -2664); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1120,    451,   -225)); mwuv(0,   2146,   -484); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1229,    450,   -224)); mwuv(0,   2858,   -486); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1320,    450,   -224)); mwuv(0,   3950,   -506); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1320,    327,   -437)); mwuv(0,   3950,   -506); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1414,    299,   -137)); mwuv(0,   6200,    858); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1320,    176,   -350)); mwuv(0,   5358,    874); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1414,    176,   -350)); mwuv(0,   6200,    858); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1320,    299,   -137)); mwuv(0,   5358,    874); mwc(0x74, 0x74, 0x55, 0xff)
	-- 0x07002940 - 0x07002A40
	mwp(v(  1320,    299,   -137)); mwuv(0,   5358,    874); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1320,    255,   -396)); mwuv(0,   4526,     58); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1320,    176,   -350)); mwuv(0,   5358,    874); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1320,    378,   -183)); mwuv(0,   4526,     58); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1320,    450,   -224)); mwuv(0,   3950,   -506); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1320,    430,   -497)); mwuv(0,   2712,  -1718); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1320,    327,   -437)); mwuv(0,   3950,   -506); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1320,    553,   -284)); mwuv(0,   2712,  -1718); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1320,    378,   -183)); mwuv(0,   4526,     58); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1123,    378,   -183)); mwuv(0,   2732,     92); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1123,    255,   -396)); mwuv(0,   2732,     92); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1229,    450,   -224)); mwuv(0,   2858,   -486); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1229,    327,   -437)); mwuv(0,   2858,   -486); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1320,    553,   -284)); mwuv(0,   2712,  -1718); mwc(0xa7, 0xa7, 0x7b, 0xff)
	mwp(v(  1229,    327,   -437)); mwuv(0,   2858,   -486); mwc(0xa7, 0xa7, 0x7b, 0xff)
	mwp(v(  1320,    430,   -497)); mwuv(0,   2712,  -1718); mwc(0xa7, 0xa7, 0x7b, 0xff)
	-- 0x07002A40 - 0x07002B40
	mwp(v(  1320,    553,   -284)); mwuv(0,   2712,  -1718); mwc(0xa7, 0xa7, 0x7b, 0xff)
	mwp(v(  1229,    450,   -224)); mwuv(0,   2858,   -486); mwc(0xa7, 0xa7, 0x7b, 0xff)
	mwp(v(  1229,    327,   -437)); mwuv(0,   2858,   -486); mwc(0xa7, 0xa7, 0x7b, 0xff)
	mwp(v(  1123,    378,   -183)); mwuv(0,   2732,     92); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1120,    451,   -225)); mwuv(0,   2146,   -484); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1120,    328,   -438)); mwuv(0,   2146,   -484); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1123,    255,   -396)); mwuv(0,   2732,     92); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1320,    378,   -183)); mwuv(0,   4526,     58); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1123,    255,   -396)); mwuv(0,   2732,     92); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1320,    255,   -396)); mwuv(0,   4526,     58); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1026,    526,   -269)); mwuv(0,    604,  -1156); mwc(0x5f, 0x5f, 0x3d, 0xff)
	mwp(v(  1060,    366,   -459)); mwuv(0,   1262,   -818); mwc(0x5f, 0x5f, 0x3d, 0xff)
	mwp(v(  1026,    403,   -481)); mwuv(0,    604,  -1156); mwc(0x5f, 0x5f, 0x3d, 0xff)
	mwp(v(  1075,    426,   -211)); mwuv(0,   1974,   -254); mwc(0xa0, 0x9e, 0x6f, 0xff)
	mwp(v(  1068,    376,   -182)); mwuv(0,   2376,    204); mwc(0xa0, 0x9e, 0x6f, 0xff)
	mwp(v(  1068,    254,   -395)); mwuv(0,   2376,    204); mwc(0xa0, 0x9e, 0x6f, 0xff)
	-- 0x07002B40 - 0x07002C20
	mwp(v(  1075,    426,   -211)); mwuv(0,   1974,   -254); mwc(0xa0, 0x9e, 0x6f, 0xff)
	mwp(v(  1068,    254,   -395)); mwuv(0,   2376,    204); mwc(0xa0, 0x9e, 0x6f, 0xff)
	mwp(v(  1075,    304,   -423)); mwuv(0,   1974,   -254); mwc(0xa0, 0x9e, 0x6f, 0xff)
	mwp(v(  1060,    488,   -247)); mwuv(0,   1262,   -818); mwc(0x88, 0x88, 0x58, 0xff)
	mwp(v(  1075,    304,   -423)); mwuv(0,   1974,   -254); mwc(0x88, 0x88, 0x58, 0xff)
	mwp(v(  1060,    366,   -459)); mwuv(0,   1262,   -818); mwc(0x88, 0x88, 0x58, 0xff)
	mwp(v(  1075,    426,   -211)); mwuv(0,   1974,   -254); mwc(0x88, 0x88, 0x58, 0xff)
	mwp(v(  1068,    376,   -182)); mwuv(0,   2376,    204); mwc(0xa7, 0xa7, 0x7b, 0xff)
	mwp(v(  1035,    335,   -158)); mwuv(0,   2460,    586); mwc(0xa7, 0xa7, 0x7b, 0xff)
	mwp(v(  1035,    213,   -371)); mwuv(0,   2460,    586); mwc(0xa7, 0xa7, 0x7b, 0xff)
	mwp(v(  1068,    254,   -395)); mwuv(0,   2376,    204); mwc(0xa7, 0xa7, 0x7b, 0xff)
	mwp(v(   956,    696,   -367)); mwuv(0,  -1608,  -2696); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1013,    694,   -366)); mwuv(0,  -1084,  -2690); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1013,    571,   -578)); mwuv(0,  -1084,  -2690); mwc(0x36, 0x36, 0x23, 0xff)
	-- 0x07002C20 - 0x07002D20
	mwp(v(  1026,    526,   -269)); mwuv(0,    604,  -1156); mwc(0x5f, 0x5f, 0x3d, 0xff)
	mwp(v(  1060,    488,   -247)); mwuv(0,   1262,   -818); mwc(0x5f, 0x5f, 0x3d, 0xff)
	mwp(v(  1060,    366,   -459)); mwuv(0,   1262,   -818); mwc(0x5f, 0x5f, 0x3d, 0xff)
	mwp(v(  1013,    694,   -366)); mwuv(0,  -1084,  -2690); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1012,    494,   -533)); mwuv(0,   -532,  -2150); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1013,    571,   -578)); mwuv(0,  -1084,  -2690); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1012,    616,   -321)); mwuv(0,   -532,  -2150); mwc(0x95, 0x95, 0x61, 0xff)
	mwp(v(  1035,    335,   -158)); mwuv(0,   2460,    586); mwc(0x9a, 0x9a, 0x72, 0xff)
	mwp(v(   979,    183,   -354)); mwuv(0,   2234,    864); mwc(0x9a, 0x9a, 0x72, 0xff)
	mwp(v(  1035,    213,   -371)); mwuv(0,   2460,    586); mwc(0x9a, 0x9a, 0x72, 0xff)
	mwp(v(   979,    306,   -141)); mwuv(0,   2234,    864); mwc(0x9a, 0x9a, 0x72, 0xff)
	mwp(v(   956,    696,   -367)); mwuv(0,  -1608,  -2696); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1013,    571,   -578)); mwuv(0,  -1084,  -2690); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   956,    573,   -579)); mwuv(0,  -1608,  -2696); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   884,    687,   -361)); mwuv(0,  -2112,  -2600); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   884,    564,   -574)); mwuv(0,  -2112,  -2600); mwc(0x36, 0x36, 0x23, 0xff)
	-- 0x07002D20 - 0x07002E20
	mwp(v(   978,    546,   -280)); mwuv(0,    -12,  -1328); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1026,    403,   -481)); mwuv(0,    604,  -1156); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   978,    423,   -492)); mwuv(0,    -12,  -1328); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1026,    526,   -269)); mwuv(0,    604,  -1156); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   923,    552,   -283)); mwuv(0,   -554,  -1372); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   923,    429,   -496)); mwuv(0,   -554,  -1372); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(  1012,    616,   -321)); mwuv(0,   -532,  -2150); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(   959,    616,   -321)); mwuv(0,  -1018,  -2124); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(   959,    494,   -533)); mwuv(0,  -1018,  -2124); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(  1012,    494,   -533)); mwuv(0,   -532,  -2150); mwc(0x74, 0x74, 0x55, 0xff)
	mwp(v(   939,    375,   -182)); mwuv(0,   1350,    308); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   968,    394,   -192)); mwuv(0,   1348,     98); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   968,    271,   -405)); mwuv(0,   1348,     98); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   972,    429,   -212)); mwuv(0,   1024,   -258); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   972,    306,   -425)); mwuv(0,   1024,   -258); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   960,    339,   -444)); mwuv(0,    608,   -558); mwc(0x36, 0x36, 0x23, 0xff)
	-- 0x07002E20 - 0x07002F10
	mwp(v(   939,    375,   -182)); mwuv(0,   1350,    308); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   968,    271,   -405)); mwuv(0,   1348,     98); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   939,    253,   -394)); mwuv(0,   1350,    308); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   972,    429,   -212)); mwuv(0,   1024,   -258); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   960,    462,   -231)); mwuv(0,    608,   -558); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   960,    339,   -444)); mwuv(0,    608,   -558); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   908,    370,   -179)); mwuv(0,   1118,    400); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   908,    248,   -391)); mwuv(0,   1118,    400); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   979,    306,   -141)); mwuv(0,   2234,    864); mwc(0x88, 0x88, 0x58, 0xff)
	mwp(v(   916,    292,   -133)); mwuv(0,   1798,   1000); mwc(0x88, 0x88, 0x58, 0xff)
	mwp(v(   916,    169,   -346)); mwuv(0,   1798,   1000); mwc(0x88, 0x88, 0x58, 0xff)
	mwp(v(   979,    183,   -354)); mwuv(0,   2234,    864); mwc(0x88, 0x88, 0x58, 0xff)
	mwp(v(   959,    616,   -321)); mwuv(0,  -1018,  -2124); mwc(0x81, 0x81, 0x5f, 0xff)
	mwp(v(   909,    608,   -316)); mwuv(0,  -1386,  -2048); mwc(0x81, 0x81, 0x5f, 0xff)
	mwp(v(   909,    486,   -529)); mwuv(0,  -1386,  -2048); mwc(0x81, 0x81, 0x5f, 0xff)
	-- 0x07002F10 - 0x07003000
	mwp(v(   868,    547,   -281)); mwuv(0,  -1006,  -1320); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   923,    552,   -283)); mwuv(0,   -554,  -1372); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   923,    429,   -496)); mwuv(0,   -554,  -1372); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   868,    424,   -493)); mwuv(0,  -1006,  -1320); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   960,    462,   -231)); mwuv(0,    608,   -558); mwc(0x40, 0x40, 0x2f, 0xff)
	mwp(v(   936,    350,   -450)); mwuv(0,    200,   -734); mwc(0x40, 0x40, 0x2f, 0xff)
	mwp(v(   960,    339,   -444)); mwuv(0,    608,   -558); mwc(0x40, 0x40, 0x2f, 0xff)
	mwp(v(   936,    473,   -238)); mwuv(0,    200,   -734); mwc(0x40, 0x40, 0x2f, 0xff)
	mwp(v(   806,    655,   -343)); mwuv(0,  -2524,  -2286); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   884,    687,   -361)); mwuv(0,  -2112,  -2600); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   884,    564,   -574)); mwuv(0,  -2112,  -2600); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   806,    532,   -555)); mwuv(0,  -2524,  -2286); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   959,    616,   -321)); mwuv(0,  -1018,  -2124); mwc(0x81, 0x81, 0x5f, 0xff)
	mwp(v(   909,    486,   -529)); mwuv(0,  -1386,  -2048); mwc(0x81, 0x81, 0x5f, 0xff)
	mwp(v(   959,    494,   -533)); mwuv(0,  -1018,  -2124); mwc(0x81, 0x81, 0x5f, 0xff)
	-- 0x07003000 - 0x070030F0
	mwp(v(   878,    371,   -179)); mwuv(0,    762,    368); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   908,    370,   -179)); mwuv(0,   1118,    400); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   908,    248,   -391)); mwuv(0,   1118,    400); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   878,    249,   -392)); mwuv(0,    762,    368); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   936,    473,   -238)); mwuv(0,    200,   -734); mwc(0x6c, 0x6c, 0x46, 0xff)
	mwp(v(   900,    475,   -239)); mwuv(0,   -178,   -764); mwc(0x6c, 0x6c, 0x46, 0xff)
	mwp(v(   900,    352,   -451)); mwuv(0,   -178,   -764); mwc(0x6c, 0x6c, 0x46, 0xff)
	mwp(v(   936,    350,   -450)); mwuv(0,    200,   -734); mwc(0x6c, 0x6c, 0x46, 0xff)
	mwp(v(   825,    530,   -271)); mwuv(0,  -1230,  -1160); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   868,    547,   -281)); mwuv(0,  -1006,  -1320); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   868,    424,   -493)); mwuv(0,  -1006,  -1320); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   916,    292,   -133)); mwuv(0,   1798,   1000); mwc(0x6a, 0x74, 0x55, 0xff)
	mwp(v(   840,    177,   -350)); mwuv(0,   1048,    946); mwc(0x6a, 0x74, 0x55, 0xff)
	mwp(v(   916,    169,   -346)); mwuv(0,   1798,   1000); mwc(0x6a, 0x74, 0x55, 0xff)
	mwp(v(   825,    407,   -483)); mwuv(0,  -1230,  -1160); mwc(0x36, 0x36, 0x23, 0xff)
	-- 0x070030F0 - 0x070031E0
	mwp(v(   909,    608,   -316)); mwuv(0,  -1386,  -2048); mwc(0x94, 0x91, 0x66, 0xff)
	mwp(v(   872,    471,   -520)); mwuv(0,  -1566,  -1856); mwc(0x94, 0x91, 0x66, 0xff)
	mwp(v(   909,    486,   -529)); mwuv(0,  -1386,  -2048); mwc(0x94, 0x91, 0x66, 0xff)
	mwp(v(   872,    593,   -307)); mwuv(0,  -1566,  -1856); mwc(0x94, 0x91, 0x66, 0xff)
	mwp(v(   852,    382,   -185)); mwuv(0,    364,    220); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   878,    371,   -179)); mwuv(0,    762,    368); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   878,    249,   -392)); mwuv(0,    762,    368); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   852,    259,   -398)); mwuv(0,    364,    220); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   916,    292,   -133)); mwuv(0,   1798,   1000); mwc(0x6a, 0x74, 0x55, 0xff)
	mwp(v(   840,    299,   -138)); mwuv(0,   1048,    946); mwc(0x6a, 0x74, 0x55, 0xff)
	mwp(v(   840,    177,   -350)); mwuv(0,   1048,    946); mwc(0x6a, 0x74, 0x55, 0xff)
	mwp(v(   900,    475,   -239)); mwuv(0,   -178,   -764); mwc(0x81, 0x81, 0x5f, 0xff)
	mwp(v(   863,    346,   -448)); mwuv(0,   -428,   -672); mwc(0x81, 0x81, 0x5f, 0xff)
	mwp(v(   900,    352,   -451)); mwuv(0,   -178,   -764); mwc(0x81, 0x81, 0x5f, 0xff)
	mwp(v(   863,    468,   -235)); mwuv(0,   -428,   -672); mwc(0x81, 0x81, 0x5f, 0xff)
	-- 0x070031E0 - 0x070032E0
	mwp(v(   753,    600,   -311)); mwuv(0,  -2528,  -1784); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   806,    655,   -343)); mwuv(0,  -2524,  -2286); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   806,    532,   -555)); mwuv(0,  -2524,  -2286); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   753,    477,   -524)); mwuv(0,  -2528,  -1784); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   872,    593,   -307)); mwuv(0,  -1566,  -1856); mwc(0xa3, 0xa3, 0x69, 0xff)
	mwp(v(   841,    569,   -293)); mwuv(0,  -1530,  -1554); mwc(0xa3, 0xa3, 0x69, 0xff)
	mwp(v(   841,    446,   -506)); mwuv(0,  -1530,  -1554); mwc(0xa3, 0xa3, 0x69, 0xff)
	mwp(v(   872,    471,   -520)); mwuv(0,  -1566,  -1856); mwc(0xa3, 0xa3, 0x69, 0xff)
	mwp(v(   825,    407,   -483)); mwuv(0,  -1230,  -1160); mwc(0xa3, 0xa3, 0x69, 0xff)
	mwp(v(   825,    530,   -271)); mwuv(0,  -1230,  -1160); mwc(0xa3, 0xa3, 0x69, 0xff)
	mwp(v(   840,    299,   -138)); mwuv(0,   1048,    946); mwc(0x44, 0x44, 0x2c, 0xff)
	mwp(v(   786,    199,   -363)); mwuv(0,    354,    748); mwc(0x44, 0x44, 0x2c, 0xff)
	mwp(v(   840,    177,   -350)); mwuv(0,   1048,    946); mwc(0x44, 0x44, 0x2c, 0xff)
	mwp(v(   863,    468,   -235)); mwuv(0,   -428,   -672); mwc(0xa0, 0x9e, 0x6f, 0xff)
	mwp(v(   826,    444,   -221)); mwuv(0,   -492,   -456); mwc(0xa0, 0x9e, 0x6f, 0xff)
	mwp(v(   826,    321,   -434)); mwuv(0,   -492,   -456); mwc(0xa0, 0x9e, 0x6f, 0xff)
	-- 0x070032E0 - 0x070033C0
	mwp(v(   863,    468,   -235)); mwuv(0,   -428,   -672); mwc(0xa0, 0x9e, 0x6f, 0xff)
	mwp(v(   826,    321,   -434)); mwuv(0,   -492,   -456); mwc(0xa0, 0x9e, 0x6f, 0xff)
	mwp(v(   863,    346,   -448)); mwuv(0,   -428,   -672); mwc(0xa0, 0x9e, 0x6f, 0xff)
	mwp(v(   833,    407,   -200)); mwuv(0,    -16,    -38); mwc(0x6a, 0x74, 0x55, 0xff)
	mwp(v(   852,    382,   -185)); mwuv(0,    364,    220); mwc(0x6a, 0x74, 0x55, 0xff)
	mwp(v(   852,    259,   -398)); mwuv(0,    364,    220); mwc(0x6a, 0x74, 0x55, 0xff)
	mwp(v(   833,    284,   -412)); mwuv(0,    -16,    -38); mwc(0x6a, 0x74, 0x55, 0xff)
	mwp(v(   826,    444,   -221)); mwuv(0,   -492,   -456); mwc(0x8e, 0x8e, 0x68, 0xff)
	mwp(v(   833,    284,   -412)); mwuv(0,    -16,    -38); mwc(0x8e, 0x8e, 0x68, 0xff)
	mwp(v(   826,    321,   -434)); mwuv(0,   -492,   -456); mwc(0x8e, 0x8e, 0x68, 0xff)
	mwp(v(   833,    407,   -200)); mwuv(0,    -16,    -38); mwc(0x8e, 0x8e, 0x68, 0xff)
	mwp(v(   747,    364,   -175)); mwuv(0,   -388,    368); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   729,    405,   -199)); mwuv(0,   -932,     -6); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   729,    283,   -411)); mwuv(0,   -932,     -6); mwc(0x36, 0x36, 0x23, 0xff)
	-- 0x070033C0 - 0x070034A0
	mwp(v(   840,    299,   -138)); mwuv(0,   1048,    946); mwc(0x44, 0x44, 0x2c, 0xff)
	mwp(v(   786,    322,   -151)); mwuv(0,    354,    748); mwc(0x44, 0x44, 0x2c, 0xff)
	mwp(v(   786,    199,   -363)); mwuv(0,    354,    748); mwc(0x44, 0x44, 0x2c, 0xff)
	mwp(v(   729,    550,   -283)); mwuv(0,  -2284,  -1330); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   753,    600,   -311)); mwuv(0,  -2528,  -1784); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   753,    477,   -524)); mwuv(0,  -2528,  -1784); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   729,    428,   -495)); mwuv(0,  -2284,  -1330); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   786,    322,   -151)); mwuv(0,    354,    748); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   747,    242,   -388)); mwuv(0,   -388,    368); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   786,    199,   -363)); mwuv(0,    354,    748); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   747,    364,   -175)); mwuv(0,   -388,    368); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   729,    283,   -411)); mwuv(0,   -932,     -6); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   720,    506,   -257)); mwuv(0,  -1956,   -926); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   720,    384,   -470)); mwuv(0,  -1956,   -926); mwc(0x36, 0x36, 0x23, 0xff)
	-- 0x070034A0 - 0x07003500
	mwp(v(   729,    405,   -199)); mwuv(0,   -932,     -6); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   720,    455,   -228)); mwuv(0,  -1480,   -460); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   720,    333,   -440)); mwuv(0,  -1480,   -460); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   729,    283,   -411)); mwuv(0,   -932,     -6); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   720,    506,   -257)); mwuv(0,  -1956,   -926); mwc(0x36, 0x36, 0x23, 0xff)
	mwp(v(   720,    384,   -470)); mwuv(0,  -1956,   -926); mwc(0x36, 0x36, 0x23, 0xff)
end

-- 0x07007EA0 - 0x07007EA2
--@includedata ./0.rgba16.png
local intro_seg7_texture_07007EA0 = just_figure_it_out_please('levels/intro/0.rgba16.png') -- Wood-like texture

-- 0x070086A0 - 0x070086A2
--@includedata ./1.rgba16.png
local intro_seg7_texture_070086A0 = just_figure_it_out_please('levels/intro/1.rgba16.png') -- Plastic-like texture

-- 0x07008EA0 - 0x07009E38
local function intro_seg7_dl_07008EA0()
	render.setMaterial(intro_seg7_texture_070086A0)
	mesh.generate(nil, MATERIAL.TRIANGLES, 849/3, intro_seg7_vertex_07000000)
end

-- 0x07009E38 - 0x0700ADC0
local function intro_seg7_dl_07009E38()
	render.setMaterial(intro_seg7_texture_07007EA0)
	-- intro_seg7_vertex_*
end

-- 0x0700ADC0 - 0x0700B3A0
local function intro_seg7_dl_0700ADC0()
	-- intro_seg7_vertex_*
end

-- 0x0700B3A0 - 0x0700B420
function intro_seg7_dl_0700B3A0()
	intro_seg7_dl_07008EA0()
	intro_seg7_dl_07009E38()
	intro_seg7_dl_0700ADC0()
	render.setRGBA(127, 255, 127, 255)
	render.setFont('DermaDefault')
	render.drawText(SCREEN_WIDTH/2, SCREEN_HEIGHT/3*1, "intro_seg7_dl_0700B3A0", TEXT_ALIGN.CENTER, TEXT_ALIGN.CENTER)
end

-- 0x0700B4A0 - 0x0700B4A2
local intro_seg7_texture_0700B4A0
if VERSION_EU or VERSION_SH then
	--@includedata ./2_eu_copyright.rgba16.png
	intro_seg7_texture_0700B4A0 = 'levels/intro/2_eu_copyright.rgba16.png'
else
	--@includedata ./2_copyright.rgba16.png
	intro_seg7_texture_0700B4A0 = 'levels/intro/2_copyright.rgba16.png'
end
intro_seg7_texture_0700B4A0 = just_figure_it_out_please(intro_seg7_texture_0700B4A0)

-- 0x0700C4A0 - 0x0700D4A0
local intro_seg7_texture_0700C4A0
if VERSION_EU then
	--@includedata ./3_eu_tm.rgba16.png
	intro_seg7_texture_0700C4A0 = 'levels/intro/3_eu_tm.rgba16.png'
elseif VERSION_SH then
	--@includedata ./3_sh_tm.rgba16.png
	intro_seg7_texture_0700C4A0 = 'levels/intro/3_sh_tm.rgba16.png'
else
	--@includedata ./3_tm.rgba16.png
	intro_seg7_texture_0700C4A0 = 'levels/intro/3_tm.rgba16.png'
end
intro_seg7_texture_0700C4A0 = just_figure_it_out_please(intro_seg7_texture_0700C4A0)

-- 0x0700C6A0 - 0x0700C790
function intro_seg7_dl_0700C6A0()
	-- Look up intro_seg7_vertex_0700B420 in n64decomp/sm64 to see what the original data looked like.
	-- Seems like the positive Y is up, not down, in N64-land, so... new_y=screen_height-original_y-original_height
	render.setMaterial(intro_seg7_texture_0700B4A0)
	render.drawTexturedRect(96, SCREEN_HEIGHT-58, 128, 16)
	render.setMaterial(intro_seg7_texture_0700C4A0)
	render.drawTexturedRect(268, SCREEN_HEIGHT-196, 16, 16)
end

-- 0x0700C790
intro_seg7_table_0700C790 = {
	0.016000, 0.052000, 0.002500, 0.148300,
	0.189200, 0.035200, 0.471600, 0.525300,
	0.116600, 0.875800, 0.947000, 0.222100,
	1.250500, 1.341300, 0.327000, 1.485400,
	1.594900, 0.406500, 1.230500, 1.563700,
	0.464300, 0.913900, 1.351300, 0.520200,
	1.022900, 1.216100, 0.574400, 1.122300,
	1.097200, 0.627000, 1.028300, 0.955600,
	0.678100, 0.934800, 1.049400, 0.727700,
	0.994200, 1.005200, 0.775900, 1.070200,
	0.961500, 0.822900, 0.995600, 0.995000,
	0.868700, 0.991600, 1.005700, 0.913500,
	1.016500, 0.985200, 0.957200, 0.985200,
	1.007100, 1.000000, 0.999900, 0.999800,
	1.010600, 1.000000, 1.000000, 1.000000,
}

-- 0x0700C880
intro_seg7_table_0700C880 = {
	1.000000, 1.000000, 1.000000, 0.987300,
	0.987300, 0.987300, 0.951400, 0.951400,
	0.951400, 0.896000, 0.896000, 0.896000,
	0.824600, 0.824600, 0.824600, 0.740700,
	0.740700, 0.740700, 0.648000, 0.648000,
	0.648000, 0.549900, 0.549900, 0.549900,
	0.450100, 0.450100, 0.450100, 0.352000,
	0.352000, 0.352000, 0.259300, 0.259300,
	0.259300, 0.175400, 0.175400, 0.175400,
	0.104000, 0.104000, 0.104000, 0.048600,
	0.048600, 0.048600, 0.012800, 0.012800,
	0.012800, 0.000000, 0.000000, 0.000000,
}
